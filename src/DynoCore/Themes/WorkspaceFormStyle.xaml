<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dyno="clr-namespace:Dyno"
    xmlns:utils="clr-namespace:Dyno.Utils">

    <SolidColorBrush x:Key="LightColor" Color="#FFF0F0F0"/>
    <SolidColorBrush x:Key="LightGray" Color="#aaaaaa"/>
    <SolidColorBrush x:Key="DarkGray" Color="#171717"/>
    <SolidColorBrush x:Key="Gray" Color="#303030"/>
    <SolidColorBrush x:Key="BlueColor" Color="#FF509DD3"/>
    <SolidColorBrush x:Key="TransBlueColor" Color="#7F509DD3"/>

    <utils:CaseConverter  x:Key="CaseConverter"/>

    <Style x:Key="RunButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Border x:Name="SelBack" Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="SelBack" Property="Opacity" Value="0.2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Background" Value="{DynamicResource TransBlueColor}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LightButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Gray" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border Padding="{TemplateBinding Padding}" BorderThickness="1,0,1,1" BorderBrush="LightGray" Height="15" Margin="0,20,0,0"/>
                        <Border x:Name="SelBack" Padding="{TemplateBinding Padding}">
                            <Border.Style>
                                <Style TargetType="Border">
                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="{DynamicResource TransBlueColor}" />

                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Border.Style>

                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White" />

            </Trigger>
        </Style.Triggers>
    </Style>


    <Style x:Key="TabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Background" Value="Transparent"/>

        <Setter Property="Padding" Value="5"/>

        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Content" Value="{Binding}"></Setter>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" x:Name="Indicator" Height="25" Margin="0">
                        <Border BorderThickness="0" Background="{TemplateBinding Background}">
                            <TextBlock HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="Center"
                                               Margin="10,0,10,0" Text="{Binding Header, Converter ={StaticResource CaseConverter}}"
                                              />
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=TabStripPlacement}" Value="{x:Static Dock.Bottom}">
                            <Setter TargetName="Indicator" Property="VerticalAlignment" Value="Top"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=TabStripPlacement}" Value="{x:Static Dock.Left}">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Indicator" Property="VerticalAlignment" Value="Bottom"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=TabStripPlacement}" Value="{x:Static Dock.Right}">
                            <Setter Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="Indicator" Property="VerticalAlignment" Value="Bottom"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <ItemsControl  ItemsSource="{Binding Items}" Background="White">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <Grid Tag ="{Binding}"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=TabStripPlacement}" Value="{x:Static Dock.Left}">
                <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType={x:Type TabItem}}, Path=TabStripPlacement}" Value="{x:Static Dock.Right}">
                <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource TransBlueColor}"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="LightGray"/>
            </Trigger>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="White"/>
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WorkspaceFormTabControlStyle" TargetType="{x:Type TabControl}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource TabItemStyle}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>


        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid KeyboardNavigation.TabNavigation="Local" >

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel Name="HeaderPanel" Panel.ZIndex="1" IsItemsHost="True" KeyboardNavigation.TabIndex="1" Margin="0,0,0,0" Background="Transparent">

                        </TabPanel>
                     
                            <ContentPresenter Grid.Row="1" Name="PART_SelectedContentHost"
                                              ContentSource="SelectedContent" Margin="0" />
                      
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- <DataTrigger Binding="{Binding TabItems.Count}" Value="1">
                           <Setter TargetName="HeaderPanel" Property="Height" Value="0"/>
                           <Setter Property="Margin" Value="0"/>
                       </DataTrigger> -->
                        <DataTrigger Binding="{Binding IsVisibleOneTabMode}" Value="true">
                            <Setter TargetName="HeaderPanel" Property="Height" Value="0"/>
                            <Setter Property="Margin" Value="0"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
